{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","time","setTime","timerOn","setTimerOn","cycle","setCycle","minutes","Math","floor","slice","seconds","miliseconds","timer","useEffect","interval","setInterval","prevTime","clearInterval","className","id","onClick","length","map","item","i","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sNA6FeA,MA3Ff,WACE,MAAwBC,mBAAS,GAAjC,mBAAOC,EAAP,KAAaC,EAAb,KACA,EAA8BF,oBAAS,GAAvC,mBAAOG,EAAP,KAAgBC,EAAhB,KACA,EAA0BJ,mBAAS,IAAnC,mBAAOK,EAAP,KAAcC,EAAd,KAEMC,GAAW,IAAMC,KAAKC,MAAOR,EAAO,IAAS,KAAKS,OAAO,GACzDC,GAAW,IAAMH,KAAKC,MAAOR,EAAO,IAAQ,KAAKS,OAAO,GACxDE,GAAe,IAAQX,EAAO,GAAM,KAAMS,OAAO,GAEjDG,EAAK,UAAMN,EAAN,cAAmBI,EAAnB,cAAgCC,GAmB3C,OAbAE,qBAAU,WACR,IAAIC,EAAW,KASf,OAPIZ,EACFY,EAAWC,aAAY,WACrBd,GAAQ,SAACe,GAAD,OAAcA,EAAW,QAChC,IACOd,GACVe,cAAcH,GAET,kBAAMG,cAAcH,MAC1B,CAACZ,IAGF,sBAAKgB,UAAU,MAAf,UAEE,sBAAKA,UAAU,aAAf,UACE,qBAAKA,UAAU,QAAQC,GAAG,QAA1B,SACE,+BAAOP,MAET,sBAAKM,UAAU,UAAUC,GAAG,UAA5B,WACIjB,GAAoB,IAATF,GACX,wBAAQkB,UAAU,QAAQE,QAAS,kBAAMjB,GAAW,IAApD,mBAIDD,GACC,wBAAQgB,UAAU,QAAQE,QA/BhB,WAClBf,EAAS,GAAD,mBAAKD,GAAL,CAAYQ,MA8BZ,mBAIDV,GACC,wBAAQgB,UAAU,OAAOE,QAAS,kBAAMjB,GAAW,IAAnD,mBAIAD,GAAWF,EAAO,GAClB,wBAAQkB,UAAU,QAAQE,QAAS,kBAAMnB,EAAQ,IAAjD,oBAIAC,GAAWF,EAAO,GAClB,wBAAQkB,UAAU,QAAQE,QAAS,kBAAMjB,GAAW,IAApD,0BAMLC,EAAMiB,QAAU,EACf,sBAAKH,UAAU,UAAf,UACE,qBAAKA,UAAU,eAAf,SACGd,EAAMkB,KAAI,SAACC,EAAMC,GAAP,OACT,wCACUA,EAAI,EADd,KACmBD,IADXC,QAKZ,+BACItB,GAAWE,EAAMiB,OAAS,GAC1B,wBACEH,UAAU,QACVE,QAAS,WACPf,EAAS,IACTJ,EAAQ,IAJZ,wBAYJ,SC5EKwB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.96c31349.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\n\nfunction App() {\n  const [time, setTime] = useState(0);\n  const [timerOn, setTimerOn] = useState(false);\n  const [cycle, setCycle] = useState([]);\n\n  const minutes = (\"0\" + Math.floor((time / 60000) % 60)).slice(-2);\n  const seconds = (\"0\" + Math.floor((time / 1000) % 60)).slice(-2);\n  const miliseconds = (\"0\" + ((time / 10) % 100)).slice(-2);\n\n  const timer = `${minutes} : ${seconds} : ${miliseconds}`;\n\n  const handleCycle = () => {\n    setCycle([...cycle, timer]);\n  };\n\n  useEffect(() => {\n    let interval = null;\n\n    if (timerOn) {\n      interval = setInterval(() => {\n        setTime((prevTime) => prevTime + 10);\n      }, 10);\n    } else if (!timerOn) {\n      clearInterval(interval);\n    }\n    return () => clearInterval(interval);\n  }, [timerOn]);\n\n  return (\n    <div className=\"App\">\n      {/* <h2>stoper</h2> */}\n      <div className=\"timer-wrap\">\n        <div className=\"timer\" id=\"timer\">\n          <span>{timer}</span>\n        </div>\n        <div className=\"buttons\" id=\"buttons\">\n          {!timerOn && time === 0 && (\n            <button className=\"start\" onClick={() => setTimerOn(true)}>\n              Start\n            </button>\n          )}\n          {timerOn && (\n            <button className=\"cycle\" onClick={handleCycle}>\n              Cycle\n            </button>\n          )}\n          {timerOn && (\n            <button className=\"stop\" onClick={() => setTimerOn(false)}>\n              Stop\n            </button>\n          )}\n          {!timerOn && time > 0 && (\n            <button className=\"reset\" onClick={() => setTime(0)}>\n              Reset\n            </button>\n          )}\n          {!timerOn && time > 0 && (\n            <button className=\"start\" onClick={() => setTimerOn(true)}>\n              Resume\n            </button>\n          )}\n        </div>\n      </div>\n      {cycle.length >= 1 ? (\n        <div className=\"results\">\n          <div className=\"results-list\">\n            {cycle.map((item, i) => (\n              <p key={i}>\n                series {i + 1}: {item}\n              </p>\n            ))}\n          </div>\n          <div>\n            {!timerOn && cycle.length > 0 && (\n              <button\n                className=\"clear\"\n                onClick={() => {\n                  setCycle([]);\n                  setTime(0);\n                }}\n              >\n                Clear\n              </button>\n            )}\n          </div>\n        </div>\n      ) : null}\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}